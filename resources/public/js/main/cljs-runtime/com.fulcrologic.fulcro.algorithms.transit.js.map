{"version":3,"sources":["com/fulcrologic/fulcro/algorithms/transit.cljc"],"mappings":"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","names":["this__4363__auto__","writer__4364__auto__","opt__4365__auto__","cljs.core/-write","com.fulcrologic.fulcro.algorithms.transit/TempIdHandler","com.fulcrologic.fulcro.algorithms.transit/->TempIdHandler","_","com.fulcrologic.fulcro.algorithms.tempid/tag","r","js/com","js/com.fulcrologic","js/com.fulcrologic.fulcro","js/com.fulcrologic.fulcro.algorithms","js/com.fulcrologic.fulcro.algorithms.transit","js/com.fulcrologic.fulcro.algorithms.transit.transit-handlers","com.fulcrologic.fulcro.algorithms.transit/transit-handlers","cljs.core.atom","com.fulcrologic.fulcro.algorithms.tempid/TempId","id","com.fulcrologic.fulcro.algorithms.tempid.tempid","com.fulcrologic.fulcro.algorithms.transit/read-handlers","cljs.core/deref","cljs.core.get","com.fulcrologic.fulcro.algorithms.transit/write-handlers","var_args","G__45310","com.fulcrologic.fulcro.algorithms.transit/writer","js/Error","com.fulcrologic.fulcro.algorithms.transit.writer","opts","cognitect.transit.writer","cljs.core.update","cljs.core/merge","G__45316","com.fulcrologic.fulcro.algorithms.transit/reader","com.fulcrologic.fulcro.algorithms.transit.reader","cognitect.transit.reader","com.fulcrologic.fulcro.algorithms.transit/serializable?","v","e45318","e","G__45320","com.fulcrologic.fulcro.algorithms.transit/transit-clj->str","data","com.fulcrologic.fulcro.algorithms.transit.transit_clj__GT_str","G__45323","cljs.core.dissoc","cljs.core.assoc","cognitect.transit/write-meta","cognitect.transit/write","G__45330","com.fulcrologic.fulcro.algorithms.transit/transit-str->clj","str","com.fulcrologic.fulcro.algorithms.transit.transit_str__GT_clj","cognitect.transit/read","cljs.spec.alpha/def-impl","cljs.core/map?","com.fulcrologic.fulcro.algorithms.transit/type-handler","type","tag","type->ground","ground->type","cognitect.transit.write_handler","t","cognitect.transit/read-handler","com.fulcrologic.fulcro.algorithms.transit/install-type-handler!","cljs.core.swap_BANG_","m"],"sourcesContent":["(ns com.fulcrologic.fulcro.algorithms.transit\n  \"Transit functions for the on-the-wire EDN communication to common remotes. Includes support for Fulcro tempids,\n   and can be extended to support additional application-specific data types.\"\n  #?(:clj\n     (:refer-clojure :exclude [ref]))\n  (:require\n    [cognitect.transit :as t]\n    [com.fulcrologic.guardrails.core :refer [>defn =>]]\n    [clojure.spec.alpha :as s]\n    [com.fulcrologic.fulcro.algorithms.tempid :as tempid #?@(:cljs [:refer [TempId]])])\n  #?(:clj\n     (:import [com.cognitect.transit\n               TransitFactory WriteHandler ReadHandler]\n              [com.fulcrologic.fulcro.algorithms.tempid TempId])))\n\n#?(:cljs\n   (deftype TempIdHandler []\n     Object\n     (tag [_ _] tempid/tag)\n     (rep [_ r] (. r -id))\n     (stringRep [_ _] nil)))\n\n#?(:clj\n   (deftype TempIdHandler []\n     WriteHandler\n     (tag [_ _] tempid/tag)\n     (rep [_ r] (.-id ^TempId r))\n     (stringRep [_ r] (str tempid/tag \"#\" r))\n     (getVerboseHandler [_] nil)))\n\n(defonce transit-handlers\n  (atom\n    {:writers {TempId (TempIdHandler.)}\n     :readers {tempid/tag #?(:clj  (reify ReadHandler (fromRep [_ id] (TempId. id)))\n                             :cljs (fn [id] (tempid/tempid id)))}}))\n\n(defn read-handlers\n  \"Returns a map that can be used for the :handlers key of a transit reader, taken from the current type handler registry.\"\n  []\n  (get @transit-handlers :readers {}))\n\n(defn write-handlers\n  \"Returns a map that can be used for the :handlers key of a transit writer, taken from the current type handler registry.\"\n  []\n  (get @transit-handlers :writers {}))\n\n\n#?(:cljs\n   (defn writer\n     \"Create a transit writer.\n\n     - `out`: An acceptable output for transit writers.\n     - `opts`: (optional) options to pass to `cognitect.transit/writer` (such as handlers).\"\n     ([] (writer {}))\n     ([opts] (t/writer :json (update opts :handlers merge (write-handlers))))))\n\n#?(:clj\n   (defn writer\n     \"Create a transit writer.\n\n     - `out`: An acceptable output for transit writers.\n     - `opts`: (optional) options to pass to `cognitect.transit/writer` (such as data type handlers).\"\n     ([out] (writer out {}))\n     ([out opts] (t/writer out :json (update opts :handlers merge (write-handlers))))))\n\n#?(:cljs\n   (defn reader\n     \"Create a transit reader.\n\n     - `opts`: (optional) options to pass to `cognitect.transit/reader` (such as data type handlers).\"\n     ([] (reader {}))\n     ([opts] (t/reader :json (update opts :handlers merge (read-handlers))))))\n\n#?(:clj\n   (defn reader\n     \"Create a transit reader.\n\n     - `opts`: (optional) options to pass to `cognitect.transit/reader` (such as data type handlers).\"\n     ([in] (reader in {}))\n     ([in opts] (t/reader in :json (-> opts (update :handlers merge (read-handlers)))))))\n\n(defn serializable?\n  \"Checks to see that the value in question can be serialized by the default fulcro writer by actually attempting to\n  serialize it.  This is *not* an efficient check.\"\n  [v]\n  #?(:clj  (try\n             (.write (writer (java.io.ByteArrayOutputStream.)) v)\n             true\n             (catch Exception e false))\n     :cljs (try\n             (.write (writer) v)\n             true\n             (catch :default e false))))\n\n(defn transit-clj->str\n  \"Use transit to encode clj data as a string. Useful for encoding initial app state from server-side rendering.\n\n  - `data`: Arbitrary data\n  - `opts`: (optional) Options to send when creating a `writer`. Always preserves metadata. Adding :metadata? true/false\n    will turn on/off metadata support. Defaults to on.\"\n  ([data] (transit-clj->str data {}))\n  ([data opts]\n   (let [opts (cond-> (dissoc opts :metadata?)\n                (not (false? (:metadata? opts))) (assoc :transform t/write-meta))]\n     #?(:cljs (t/write (writer opts) data)\n        :clj\n              (with-open [out (java.io.ByteArrayOutputStream.)]\n                (t/write (writer out opts) data)\n                (.toString out \"UTF-8\"))))))\n\n(defn transit-str->clj\n  \"Use transit to decode a string into a clj data structure. Useful for decoding initial app state\n   when starting from a server-side rendering.\"\n  ([str] (transit-str->clj str {}))\n  ([str opts]\n   #?(:cljs (t/read (reader opts) str)\n      :clj  (t/read (reader (java.io.ByteArrayInputStream. (.getBytes str \"UTF-8\")) opts)))))\n\n(s/def ::reader map?)\n(s/def ::writer map?)\n\n(>defn type-handler\n  \"Creates a map that can be registered with Fulcro's transit support.\n\n   * `type` is a `deftype` or `defrecord` that represents your runtime data that you want to support in Transit\n   * `tag` is a string that uniquely identifies your type on the wire\n   * `type->ground` is a function that can take an instance of your `type` and turn it into something transit already\n   knows how to handle.\n   * `ground->type` is a function that can take whatever `type->ground` generated and turn it back into your `type`.\n\n   This function returns a map that contains a :reader and :writer key. The value at these keys is suitable for merging\n   at the `:handlers` key of a reader or writer's option map.\n\n   See also `install-type-handler!` for adding this to Fulcro's registry of type support.\"\n  [type tag type->ground ground->type]\n  [any? string? fn? fn? => (s/keys :req-un [::reader ::writer])]\n  {:writer {type (t/write-handler\n                   (fn [_] tag)\n                   (fn [t] (type->ground t))\n                   (fn [r] (str tag \"#\" r)))}\n   :reader {tag (t/read-handler ground->type)}})\n\n(>defn install-type-handler!\n  \"Install a type handler (generated by `type-handler`) into the global Fulcro transit support registry. This registry\n   can be used by any Fulcro-aware facility that needs to use transit for any standard purpose where app-specific type\n   support is desired.\"\n  [t]\n  [(s/keys :req-un [::reader ::writer]) => nil?]\n  (swap! transit-handlers (fn [m]\n                            (-> m\n                              (update :readers merge (:reader t))\n                              (update :writers merge (:writer t)))))\n  nil)\n"]}